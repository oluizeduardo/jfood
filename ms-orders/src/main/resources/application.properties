spring.application.name=ms-orders

# Spring Eureka configuration
server.port=0
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true
eureka.client.service-url.defaultZone=http://localhost:8081/eureka
# Custom instance id name.
eureka.instance.instance-id=${spring.application.name}:${random.int[1,50]}
# Explicitly inform the hostname.
eureka.instance.hostname=localhost
# Prefer the machine's IP instead of the DNS name.
eureka.instance.prefer-ip-address=true

# Datasource configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/jfood_orders
spring.datasource.username=postgres
spring.datasource.password=Senh4Turm4#1
spring.datasource.driver-class-name=org.postgresql.Driver

# Flyway configuration
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true

# Keycloak configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:7001/realms/JFood

# Product information address
product.api.url=http://localhost:8082/ms-products/products/{id}

###############################
# CIRCUIT BREAKER CONFIGURATION
###############################
# Define que as últimas 5 chamadas ao serviço serão analisadas para verificar se há problemas.
resilience4j.circuitbreaker.instances.productService.sliding-window-size=5

# Indica que o sistema só começa a avaliar falhas após pelo menos 5 chamadas.
resilience4j.circuitbreaker.instances.productService.minimum-number-of-calls=5

# Se metade dessas chamadas falhar, o sistema entende que há um problema e ativa uma proteção (estado OPEN).
resilience4j.circuitbreaker.instances.productService.failure-rate-threshold=50

# Quando ativa a proteção, ele para de chamar o serviço por um tempo de 50 segundos.
resilience4j.circuitbreaker.instances.productService.wait-duration-in-open-state=50s

# Depois de 50s aberto, testa o serviço novamente com apenas 5 chamadas (estado HALF-OPEN).
resilience4j.circuitbreaker.instances.productService.permitted-number-of-calls-in-half-open-state=3
